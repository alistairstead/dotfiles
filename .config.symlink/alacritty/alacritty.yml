env:
  TERM: alacritty

window:
  # opacity: 1.0
  dimensions:
    columns: 110
    lines: 52
  padding:
    x: 0
    y: 0
  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full

  # When true, alacritty starts maximized.
  # start_maximized: false
  dynamic_title: false

scrolling:
  history: 10000
  multiplier: 3

mouse:
  hide_when_typing: true

font:
  # normal:
  #   family: SFMono Nerd Font
  #   style: Regular
  normal:
    family: FiraCode Nerd Font
    style: Light
  bold:
    family: FiraCode Nerd Font
    style: Regular
  italic:
    family: FiraCode Nerd Font Mono
    tyle: Italic
  size: 17.0
  offset:
    x: 0
    y: 5
  glyph_offset:
    x: 0
    y: 0
  use_thin_strokes: true

draw_bold_text_with_bright_colors: false

# Colors (Dracula PRO)
colors:
  # Default colors
  primary:
    background: "0x22212c"
    foreground: "0xf8f8f2"

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  cursor:
    text: "0x454158"
    cursor: "0xf8f8f2"

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  selection:
    text: "0xf8f8f2"
    background: "0x454158"

  # Normal colors
  normal:
    black: "0x22212c"
    red: "0xff9580"
    green: "0x8aff80"
    yellow: "0xffff80"
    blue: "0x9580ff"
    magenta: "0xff80bf"
    cyan: "0x80ffea"
    white: "0xf8f8f2"

  # Bright colors
  bright:
    black: "0x22212c"
    red: "0xffaa99"
    green: "0xa2ff99"
    yellow: "0xffff99"
    blue: "0xaa99ff"
    magenta: "0xff99cc"
    cyan: "0x99ffee"
    white: "0xffffff"

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - â–‡ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true
# vi_mode_cursor:
#   text: CellBackground
#   cursor: CellForeground
# # Default colors
# primary:
#   background: "0x1a1b26"
#   foreground: "0xc0caf5"
#
# # Normal colors
# normal:
#   black: "0x15161E"
#   red: "0xf7768e"
#   green: "0x9ece6a"
#   yellow: "0xe0af68"
#   blue: "0x7aa2f7"
#   magenta: "0xbb9af7"
#   cyan: "0x7dcfff"
#   white: "0xa9b1d6"
#
# # Bright colors
# bright:
#   black: "0x414868"
#   red: "0xf7768e"
#   green: "0x9ece6a"
#   yellow: "0xe0af68"
#   blue: "0x7aa2f7"
#   magenta: "0xbb9af7"
#   cyan: "0x7dcfff"
#   white: "0xc0caf5"
#
# indexed_colors:
#   - { index: 16, color: "0xff9e64" }
#   - { index: 17, color: "0xdb4b4b" }
# vi_mode_cursor:
#   text: CellBackground
#   cursor: CellForeground
# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
# key_bindings:
#   - { key: F11, action: ToggleFullscreen }
#- { key: Paste,                                       action: Paste          }
#- { key: Copy,                                        action: Copy           }
#- { key: L,         mods: Control,                    action: ClearLogNotice }
#- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
#- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  }
#- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
#- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   }
#- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
#- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
#- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
#- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
#- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
#- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
#- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi|~Search, action: Copy                    }
#- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
#- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
#- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi|~Search, action: Open                    }
#- { key: K,                           mode: Vi|~Search, action: Up                      }
#- { key: J,                           mode: Vi|~Search, action: Down                    }
#- { key: H,                           mode: Vi|~Search, action: Left                    }
#- { key: L,                           mode: Vi|~Search, action: Right                   }
#- { key: Up,                          mode: Vi|~Search, action: Up                      }
#- { key: Down,                        mode: Vi|~Search, action: Down                    }
#- { key: Left,                        mode: Vi|~Search, action: Left                    }
#- { key: Right,                       mode: Vi|~Search, action: Right                   }
#- { key: Key0,                        mode: Vi|~Search, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
#- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
#- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
#- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
#- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
#- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
#- { key: N,                           mode: Vi|~Search, action: SearchNext              }
#- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

# Search Mode
#- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
#- { key: Escape,                mode: Search,     action: SearchCancel          }
#- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
#- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
#- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
#- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
#- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
#- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
#- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
#- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
#- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

# (Windows, Linux, and BSD only)
#- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
#- { key: C,              mods: Control|Shift,                   action: Copy             }
#- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
#- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
#- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
#- { key: Insert,         mods: Shift,                           action: PasteSelection   }
#- { key: Key0,           mods: Control,                         action: ResetFontSize    }
#- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
#- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
#- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
#- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
#- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

# (Windows only)
#- { key: Return,   mods: Alt,           action: ToggleFullscreen }

# (macOS only)
#- { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"                 }
#- { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory          }
#- { key: Key0,           mods: Command,                    action: ResetFontSize         }
#- { key: Equals,         mods: Command,                    action: IncreaseFontSize      }
#- { key: Plus,           mods: Command,                    action: IncreaseFontSize      }
#- { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize      }
#- { key: Minus,          mods: Command,                    action: DecreaseFontSize      }
#- { key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize      }
#- { key: V,              mods: Command,                    action: Paste                 }
#- { key: C,              mods: Command,                    action: Copy                  }
#- { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection        }
#- { key: H,              mods: Command,                    action: Hide                  }
#- { key: H,              mods: Command|Alt,                action: HideOtherApplications }
#- { key: M,              mods: Command,                    action: Minimize              }
#- { key: Q,              mods: Command,                    action: Quit                  }
#- { key: W,              mods: Command,                    action: Quit                  }
#- { key: N,              mods: Command,                    action: SpawnNewInstance      }
#- { key: F,              mods: Command|Control,            action: ToggleFullscreen      }
#- { key: F,              mods: Command, mode: ~Search,     action: SearchForward         }
#- { key: B,              mods: Command, mode: ~Search,     action: SearchBackward        }
