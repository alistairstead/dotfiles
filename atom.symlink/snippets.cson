# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
'.source.js':
  "@ console.log":
    prefix: "cl"
    body: "console.log(${0});"
  "@ console.error":
    prefix: "ce"
    body: "console.error(${0});"
  "@ console.dir":
    prefix: "cd"
    body: "console.dir(${0});"
  "@ anonymous function":
    prefix: "f"
    body: "function (${1:arguments}) {${0}}"
  "@ named function":
    prefix: "fn"
    body: """
    function ${1:name} (${2:arguments}) {
    \t${0}
    }
    """
  "@ immediately-invoked function expression":
    prefix: "iife"
    body: """
    (function () {
    \t'use strict';
    \t${0}
    })();
    """
  "@ function apply":
    prefix: "fa"
    body: """
    ${1:fn}.apply(${2:this}, ${3:arguments})
    """
  "@ function call":
    prefix: "fc"
    body: """
    ${1:fn}.call(${2:this}, ${3:arguments})
    """
  "@ function bind":
    prefix: "fb"
    body: """
    ${1:fn}.bind(${2:this}, ${3:arguments})
    """
  '@ use strict':
    'prefix': 'us'
    'body': "'use strict';"
  "@ describe":
    prefix: "desc"
    body: """
    describe('${1:description}', function () {
    \t${0}
    });
    """
  "@ it asynchronous":
    prefix: "ita"
    body: """
    it('${1:description}', function (done) {
    \t${0}
    });
    """
  "@ it synchronous":
    prefix: "its"
    body: """
    it('${1:description}', function () {
    \t${0}
    });
    """
  "@ exports.member":
    prefix: "ex"
    body: "exports.${1:name} = ${2:value};"
  "@ module.exports":
    prefix: "mo"
    body: "module.exports = ${1:name};"
  "@ require":
    prefix: "re"
    body: "require('${1:module}');"
  "@ forEach loop":
    prefix: "fe"
    body: """
    ${1:iterable}.forEach(function (${2:item}) {
    \t${0}
    });
    """
  "@ Chain forEach":
    prefix: ".fe"
    body: ".forEach(function (${1:item}) {${0}})"
  "@ map":
    prefix: "map"
    body: """
    ${1:iterable}.map(function (${2:item}) {
    \t${0}
    });
    """
  "@ Chain map":
    prefix: ".map"
    body: ".map(function (${1:item}) {${0}})"
  "@ reduce":
    prefix: "reduce"
    body: """
    ${1:iterable}.reduce(function (${2:previous}, ${3:current}) {
    \t${0}
    }${4:, initial});
    """
  "@ Chain reduce":
    prefix: ".reduce"
    body: ".reduce(function (${1:previous}, ${2:current}) {${0}}${4:, initial})"
  "@ filter":
    prefix: "filter"
    body: """
    ${1:iterable}.filter(function (${2:item}) {
    \t${0}
    });
    """
  "@ Chain filter":
    prefix: ".filter"
    body: ".filter(function (${1:item}) {${0}})"
