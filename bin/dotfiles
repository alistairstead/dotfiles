#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

ARROW="￫"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Get dotfiles dir (so run this script from anywhere)
export DOTFILES_DIR EXTRA_DIR
DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

sub_help () {
    echo -e "$ARROW Usage: ${YELLOW}$BIN_NAME <command>${NC}"
    echo
    echo "Commands:"
    echo "   -e, --edit, edit    Open dotfiles directory for editing"
    echo "   -h, --help, help    This help message"
    echo "   update              Update packages and pkg managers (antibody, OS, brew, yarn)"
    echo "   clean               Clean up caches (brew, npm, yarn)"
    echo "   symlinks            Run symlinks script to link all the dotfile config"
    echo "   install             Run install script to install topic dependencies"
    echo "   gitconfig           Run gitconfigscript to deploy local config"
    echo "   brew                Run brew script to install all brews and casks"
    echo "   antibody            Run antibody script to install and cache sources"
    echo "   defaults            Run MacOS defaults script"
    echo "   dock                Run MacOS dock script"
}

sub_edit() {
  $EDITOR "${DOTFILES_DIR}"
  exit
}

sub_update () {
    set -e
    echo "> update dotfiles"
    cd ~/.dotfiles
    git stash
    git pull
    echo "› system update"
    sudo softwareupdate -i -a

    if which yarn >/dev/null 2>&1; then
      echo "› yarn update"
      yarn global upgrade
    fi

    if which brew >/dev/null 2>&1; then
      echo "› brew update"
      brew update
      brew upgrade
    fi

    if which antibody >/dev/null 2>&1; then
      echo "› antibody update"
      antibody update
    fi

    echo -e "${GREEN}$ARROW Success! Update command finished.${NC}"
}

sub_clean () {
    if which brew >/dev/null 2>&1; then
      brew cleanup
    fi
    if which npm >/dev/null 2>&1; then
      npm cache clean --force
    fi
    if which yarn >/dev/null 2>&1; then
      yarn cache clean
    fi
    echo -e "${GREEN}$ARROW Success! Clean command finished.${NC}"
}

sub_symlinks () {
    . "$DOTFILES_DIR/script/install_symlinks.sh"
    echo -e "${GREEN}$ARROW Success! Symlinks command finished.${NC}"
}

sub_install () {
  . "$DOTFILES_DIR/script/install_topics.sh"
  echo -e "${GREEN}$ARROW Success! Install command finished.${NC}"
}

sub_gitconfig () {
  . "$DOTFILES_DIR/script/install_gitconfig.sh"
  echo -e "${GREEN}$ARROW Success! Gitconfig command finished.${NC}"
}

sub_brew () {
    . "$DOTFILES_DIR/script/install_brews.sh"
    echo -e "${GREEN}$ARROW Success! Brew command finished.${NC}"
}

sub_antibody () {
    . "$DOTFILES_DIR/script/install_antibody.sh"
    echo -e "${GREEN}$ARROW Success! Antibody command finished.${NC}"
}

sub_defaults () {
    . "$DOTFILES_DIR/macos/set-defaults.sh"
    echo -e "${GREEN}$ARROW Success! MacOS defaults command finished.${NC}"
}

sub_dock () {
    . "$DOTFILES_DIR/macos/dock.sh"
    echo -e "${GREEN}$ARROW Success! MacOS dock command finished.${NC}"
}

case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    "-e" | "--edit")
        sub_edit
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo -e "${RED}$ARROW Error: '$COMMAND_NAME' is not a known command or has errors.${NC}" >&2
            sub_help
            exit 1
        fi
        ;;
esac
