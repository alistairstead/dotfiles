[alias]

  a   = commit --amend
  br  = branch
  c   = commit
  commit = commit --verbose
  ca  = !git add -A && git commit -av             # Commit all changes
  co  = checkout
  cp  = cherry-pick
  dc  = diff --cached
  g   = log --graph --pretty=custom               # Show custom graph
  l   = log --pretty=custom                       # Show custom log
  lc  = shortlog --summary --numbered             # List contributors
  rlc = !git reset --hard HEAD~1                  # Remove last commit
  s   = status -s
  st  = status
  ulc = reset --soft HEAD~1                       # Undo last commit

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the `master` branch
  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

  cnv = commit --no-verify

  # show files that have changed between two branches (git dbr master..branch)
  dbr = diff --name-status
  # show diff of cached files
  dc = diff --cached
  # show what I did today
  day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"

  fixup = !sh -c 'git commit --fixup=$1' -
  squash = !sh -c 'git commit --squash=$1' -
  ri = rebase --interactive --autosquash

  # stash shortcuts
  sp = stash pop
  sw = stash save
  sl = stash list
  sh = show --pretty="format:" --name-only

  undo = reset --soft HEAD~1
  amend = commit --amend -C HEAD

  cleanup = "!git remote prune origin && git gc && git clean -df && git stash clear"

  # rebase the current branch with changes from upstream remote
  update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`


[commit]
  template = ~/dotfiles/git/templates/commit-template

[pretty]
  # custom = "%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset"
  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
  #                     │        │            │            │             └─ author name
  #                     │        │            │            └─ message
  #                     │        │            └─ date (relative)
  #                     │        └─ decorations (branch, heads or tags)
  #                     └─ hash (abbreviated)

[init]

  templatedir = ~/dotfiles/git/templates

[rerere]

  enabled = true

[difftool "Kaleidoscope"]

  cmd = ksdiff --partial-changeset --relative-path $MERGED -- $LOCAL $REMOTE

[diff]

  # Detect copies as well as renames
  renames = copies
  tool = Kaleidoscope

[difftool]

  prompt = false

[user]
  email = alistair_stead@me.com
  name = Alistair Stead
  signingkey = C4FE2AAA

#[commit]
#  gpgsign = true

[github]
  user = alistairstead
  oauth-token = 14b04bc533ea2c466f44c14ade69ffefc63a55c714b04bc533ea2c466f44c14ade69ffefc63a55c
